<#
.SYNOPSIS
Create-ImmutableID.ps1 - Generate ImmutableID (base64 conversion) from GUID of specified AD user(s). 

.DESCRIPTION 
Generates an immutableID, base64 coversion of the GUID, of specified user(s). If more than one user is processed
it will generate a CSV file of results.  

.OUTPUTS
Single user output is output to the console, multi-user is output to a CSV file.

.PARAMETER Property
(Optional) Specifies what AD user property to match its value with the value specified in the PropertyValue paramenter.

.PARAMETER PropertyValue
The value to use to locate AD user(s)

.PARAMETER Filename
(Optional) Specifies the CSV file name to be used for the report.
If no file name specificed then a unique file name is generated by the script.

.EXAMPLE
.\Create-ImmutableID.ps1 -PropertyValue smurcio@domain.com
Returns the immutableID for an AD user who's UPN is smurcio@domain.com

.EXAMPLE
.\Create-ImmutableID.ps1 -Property UserPrincipalName -Propertyvalue * -Filename C:\IDs_All_users.csv
Returns a report with the immutableIDs for all users in the AD forest, saves report as specified.

.LINK
https://github.com/sammurcio/Create-immutableID.ps1

.NOTES
Written by: Samuel Murcio

Find me on:
* LinkedIn:	http://lnked.in/murcio/
* Github:	https://git.io/v6kUy
* Blog:		http://msjunkies.com/
* Email:	sam@murico.tech

Change Log
V1.00, 08/02/2015 - Initial version
V1.01, 09/28/2012 - Added filename parameter
V1.02, 10/16/2012 - Added functionality to search across all child domains within a forest
V1.03, 10/17/2012 - Added visibile progress bar
V1.04, 06/12/2016 - Improved search filter when specifying wildcard for propertyvalue

#>

param(
  [Parameter(Mandatory=$true)]
  [string]$propertyValue,
  [string]$property = "userprincipalname",
  [string]$fileName
  )


if ($filename)
{
	$reportFile = $fileName
}
else
{
	$timeStamp = Get-Date -UFormat %Y%m%d-%H%M
	$random = -join(48..57+65..90+97..122 | ForEach-Object {[char]$_} | Get-Random -Count 6)
	$reportFile = "$($env:USERPROFILE)\Desktop\GeneratedIDs-$($timestamp)-$($random).csv"
}

function find-aduser {
  param(
    [Parameter(Mandatory=$true)]
    [string]$propertyValue,
    [string]$property
  )
  $script:users = @()
  
  if ($propertyValue -eq "*") {
    $query = "*"
  } else {
    $query = "$($property) -eq '$($propertyValue)'"
  }
  
  $domains = Get-ADForest  | select -ExpandProperty Domains
  $dcs = foreach ($domain in $domains){(Get-ADDomainController -DomainName $domain -Discover -Service ADWS | select -First 1).hostname}
  $i = 0

  foreach ($a in $dcs) {
    $i = $i + 1
    $pct = $i/$dcs.count * 100
    Write-Progress -Activity "Attempting to perform query '$($query)' on AD DC $($a)" -Status "Processing DC $i of $($dcs.count)" -PercentComplete $pct
  
    if ($test = Get-ADUser -Filter "$query" -Server $a){
      $obj = $test
      $obj | Add-Member –MemberType NoteProperty –Name DCMTA -Value $a -Force
      $script:users += $obj
    }

  }

}

function convert-guid {
  param(
    [Parameter(Mandatory=$true)]
    [GUID]$guidtoconvert
  )

  $bytearray = $guidtoconvert.ToByteArray()
  $immutableID = [System.Convert]::ToBase64String($bytearray)
  $immutableID
}

Import-Module ActiveDirectory

Find-ADuser -propertyValue $propertyValue -property $property
$userCount = $users.count

if ($userCount -eq 0) {
  Write-Host "No user found based with supplied values" -ForegroundColor Yellow
} else {
  $i = 0
  $results = @()

  foreach ($user in $users) {
    $i = $i + 1
    $pct = $i/$userCount * 100
    Write-Progress -Activity "Attempting to create immutableID for $($user.userprincipalname)" -Status "Processing user $i of $userCount" -PercentComplete $pct

    $immutableID = convert-guid -guidtoconvert $user.objectguid
    
    $obj = [pscustomobject]@{Userprincipalname=$user.userprincipalname; objectGUID=$user.objectguid; ImmutableID=$immutableID; name=$user.name; dcmta=$user.dcmta}
    $results += $obj
  }

}

if($userCount -gt 1) {
  $results | Export-Csv -NoTypeInformation $reportFile
  Write-Host -ForegroundColor Yellow "Results file saved here: $($reportFile)"
} else {
 $results
}

